name: Deploy to OVH Server

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, bcmath, intl, curl, sqlite, pdo_mysql, pdo_pgsql, fileinfo
          tools: composer

      - uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-${{ runner.os }}-

      # Installer dev-deps pour les tests
      - name: Install Composer dependencies (with dev for tests)
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Prepare .env.testing (SQLite) + migrate
        run: |
          cp .env.example .env.testing || true
          {
            echo "APP_ENV=testing"
            echo "APP_DEBUG=true"
            echo "APP_URL=http://localhost"
            echo "DB_CONNECTION=sqlite"
            echo "DB_DATABASE=$(pwd)/database/testing.sqlite"
            echo "CACHE_DRIVER=array"
            echo "QUEUE_CONNECTION=sync"
            echo "SESSION_DRIVER=array"
          } > .env.testing
          mkdir -p database
          rm -f database/testing.sqlite && touch database/testing.sqlite
          php artisan key:generate --env=testing
          php artisan migrate --env=testing --force

      - name: Run Laravel tests
        run: php artisan test --colors=never

      # Recompiler sans dev-deps pour l’artefact de prod
      - name: Optimize vendor for production
        run: composer install --no-dev --prefer-dist --no-interaction --no-progress --optimize-autoloader

      - name: Prepare artifact
        run: |
          mkdir -p deploy
          rsync -a \
            --exclude ".git" \
            --exclude ".github" \
            --exclude "node_modules" \
            --exclude "tests" \
            --exclude "storage" \
            --exclude ".env" \
            --exclude "database/*.sqlite" \
            ./ deploy/

      - uses: actions/upload-artifact@v4
        with:
          name: laravel-build
          path: deploy/

  deploy-on-prod:
    needs: build
    runs-on: ubuntu-latest
    env:
      SERVER_PATH: "/var/www/topall"
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: laravel-build
          path: deploy/

      - name: Deploy to prod OVH Server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          # Vérif secrets requis
          missing=()
          [[ -z "${SSH_PRIVATE_KEY:-}" ]] && missing+=("SSH_PRIVATE_KEY")
          [[ -z "${SERVER_USER:-}"      ]] && missing+=("SERVER_USER")
          [[ -z "${SERVER_IP:-}"        ]] && missing+=("SERVER_IP")
          if ((${#missing[@]})); then
            echo "Missing secrets: ${missing[*]}"
            exit 1
          fi

          # SSH ready
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$SERVER_IP" >> ~/.ssh/known_hosts

          # Crée le dossier cible
          ssh -o StrictHostKeyChecking=no "$SERVER_USER@$SERVER_IP" "mkdir -p \"$SERVER_PATH\""

          # Déploiement: protéger storage/ et public/storage et .env
          rsync -az --delete \
            --exclude 'storage' \
            --exclude 'public/storage' \
            --exclude '.env' \
            --chown=$SERVER_USER:www-data \
            --chmod=Du=rwx,Dg=rwx,Do=rx,Fu=rw,Fg=rw,Fo=r \
            deploy/ "$SERVER_USER@$SERVER_IP:$SERVER_PATH"

          # Script distant
          ssh -o StrictHostKeyChecking=no "$SERVER_USER@$SERVER_IP" bash -s -- "$SERVER_PATH" << 'EOF'
          set -Eeuo pipefail
          APP_DIR="$1"
          cd "$APP_DIR"

          # Le .env doit exister et ne pas être vide (géré uniquement côté serveur)
          if [ ! -s ".env" ]; then
            echo "ERROR: .env is missing or empty at $APP_DIR/.env"
            echo "Hint: create it on server: sudo -u $(whoami) nano $APP_DIR/.env"
            exit 1
          fi

          # Dossiers nécessaires
          mkdir -p storage/app storage/logs storage/framework/{cache,sessions,testing,views} bootstrap/cache
          chown -R "$(whoami)":www-data storage bootstrap/cache || true
          chmod -R ug+rwX storage bootstrap/cache

          # Nettoyage des caches (avant recache)
          php artisan cache:clear || true
          php artisan config:clear || true
          php artisan route:clear || true
          php artisan view:clear  || true

          # Génère la clé si absente
          if ! grep -q '^APP_KEY=' .env 2>/dev/null || grep -q '^APP_KEY=$' .env ; then
            php artisan key:generate --force || true
          fi

          # Migrations + recache
          php artisan migrate --force
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

          php artisan storage:link || true
          php artisan l5-swagger:generate || true
          EOF
